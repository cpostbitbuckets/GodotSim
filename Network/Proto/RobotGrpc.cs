// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: robot.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FRCSim {
  /// <summary>
  /// A service to communicate robot state between the robot and the simulator
  /// </summary>
  public static partial class RobotService
  {
    static readonly string __ServiceName = "FRCSim.RobotService";

    static readonly grpc::Marshaller<global::FRCSim.InputRequest> __Marshaller_FRCSim_InputRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FRCSim.InputRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FRCSim.MotorOutputs> __Marshaller_FRCSim_MotorOutputs = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FRCSim.MotorOutputs.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FRCSim.MotorConfig> __Marshaller_FRCSim_MotorConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FRCSim.MotorConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::FRCSim.RobotState> __Marshaller_FRCSim_RobotState = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::FRCSim.RobotState.Parser.ParseFrom);

    static readonly grpc::Method<global::FRCSim.InputRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Input = new grpc::Method<global::FRCSim.InputRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "Input",
        __Marshaller_FRCSim_InputRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::FRCSim.MotorOutputs, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateMotorOutputs = new grpc::Method<global::FRCSim.MotorOutputs, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "UpdateMotorOutputs",
        __Marshaller_FRCSim_MotorOutputs,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::FRCSim.MotorConfig, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateMotor = new grpc::Method<global::FRCSim.MotorConfig, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMotor",
        __Marshaller_FRCSim_MotorConfig,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::FRCSim.RobotState, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Robot = new grpc::Method<global::FRCSim.RobotState, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Robot",
        __Marshaller_FRCSim_RobotState,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ConnectToRobot = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConnectToRobot",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FRCSim.RobotReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RobotService</summary>
    [grpc::BindServiceMethod(typeof(RobotService), "BindService")]
    public abstract partial class RobotServiceBase
    {
      /// <summary>
      /// a stream to continuously update joystick values on the server
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Input(grpc::IAsyncStreamReader<global::FRCSim.InputRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// open up a stream to the server to send motor outputs
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateMotorOutputs(grpc::IAsyncStreamReader<global::FRCSim.MotorOutputs> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to update motor config
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateMotor(global::FRCSim.MotorConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to update robot state
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Robot(global::FRCSim.RobotState request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Called by the unity client to tell the java robot to re-send motor data to the server.
      /// This is in the case of a unity client being restarted and requiring the robot to reinitialize
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ConnectToRobot(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RobotService</summary>
    public partial class RobotServiceClient : grpc::ClientBase<RobotServiceClient>
    {
      /// <summary>Creates a new client for RobotService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RobotServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RobotService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RobotServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RobotServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RobotServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// a stream to continuously update joystick values on the server
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::FRCSim.InputRequest, global::Google.Protobuf.WellKnownTypes.Empty> Input(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Input(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// a stream to continuously update joystick values on the server
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::FRCSim.InputRequest, global::Google.Protobuf.WellKnownTypes.Empty> Input(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_Input, null, options);
      }
      /// <summary>
      /// open up a stream to the server to send motor outputs
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::FRCSim.MotorOutputs, global::Google.Protobuf.WellKnownTypes.Empty> UpdateMotorOutputs(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMotorOutputs(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// open up a stream to the server to send motor outputs
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::FRCSim.MotorOutputs, global::Google.Protobuf.WellKnownTypes.Empty> UpdateMotorOutputs(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_UpdateMotorOutputs, null, options);
      }
      /// <summary>
      /// RPC to update motor config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateMotor(global::FRCSim.MotorConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMotor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to update motor config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateMotor(global::FRCSim.MotorConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMotor, null, options, request);
      }
      /// <summary>
      /// RPC to update motor config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateMotorAsync(global::FRCSim.MotorConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMotorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to update motor config
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateMotorAsync(global::FRCSim.MotorConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMotor, null, options, request);
      }
      /// <summary>
      /// RPC to update robot state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Robot(global::FRCSim.RobotState request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Robot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to update robot state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Robot(global::FRCSim.RobotState request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Robot, null, options, request);
      }
      /// <summary>
      /// RPC to update robot state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RobotAsync(global::FRCSim.RobotState request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RobotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to update robot state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RobotAsync(global::FRCSim.RobotState request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Robot, null, options, request);
      }
      /// <summary>
      /// Called by the unity client to tell the java robot to re-send motor data to the server.
      /// This is in the case of a unity client being restarted and requiring the robot to reinitialize
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ConnectToRobot(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectToRobot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the unity client to tell the java robot to re-send motor data to the server.
      /// This is in the case of a unity client being restarted and requiring the robot to reinitialize
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ConnectToRobot(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConnectToRobot, null, options, request);
      }
      /// <summary>
      /// Called by the unity client to tell the java robot to re-send motor data to the server.
      /// This is in the case of a unity client being restarted and requiring the robot to reinitialize
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ConnectToRobotAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectToRobotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Called by the unity client to tell the java robot to re-send motor data to the server.
      /// This is in the case of a unity client being restarted and requiring the robot to reinitialize
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ConnectToRobotAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConnectToRobot, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RobotServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RobotServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RobotServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Input, serviceImpl.Input)
          .AddMethod(__Method_UpdateMotorOutputs, serviceImpl.UpdateMotorOutputs)
          .AddMethod(__Method_UpdateMotor, serviceImpl.UpdateMotor)
          .AddMethod(__Method_Robot, serviceImpl.Robot)
          .AddMethod(__Method_ConnectToRobot, serviceImpl.ConnectToRobot).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RobotServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Input, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::FRCSim.InputRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Input));
      serviceBinder.AddMethod(__Method_UpdateMotorOutputs, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::FRCSim.MotorOutputs, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateMotorOutputs));
      serviceBinder.AddMethod(__Method_UpdateMotor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FRCSim.MotorConfig, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UpdateMotor));
      serviceBinder.AddMethod(__Method_Robot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::FRCSim.RobotState, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Robot));
      serviceBinder.AddMethod(__Method_ConnectToRobot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ConnectToRobot));
    }

  }
}
#endregion
