// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: robot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace FRCSim {

  /// <summary>Holder for reflection information generated from robot.proto</summary>
  public static partial class RobotReflection {

    #region Descriptor
    /// <summary>File descriptor for robot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RobotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtyb2JvdC5wcm90bxIGRlJDU2ltGhtnb29nbGUvcHJvdG9idWYvZW1wdHku",
            "cHJvdG8isgIKClJvYm90U3RhdGUSJwoFc3RhdGUYASABKA4yGC5GUkNTaW0u",
            "Um9ib3RTdGF0ZS5TdGF0ZRITCgtpbml0aWFsaXplZBgCIAEoCBIPCgdlbmFi",
            "bGVkGAMgASgIEh0KFWRyaXZlclN0YXRpb25BdHRhY2hlZBgEIAEoCBIlCh1m",
            "aWVsZE1hbmFnZW1lbnRTeXN0ZW1BdHRhY2hlZBgFIAEoCCI7CgVTdGF0ZRIM",
            "CghEaXNhYmxlZBAAEg4KCkF1dG9ub21vdXMQARIICgRUZXN0EAISCgoGVGVs",
            "ZW9wEAMiUgoRQWxsaWFuY2VTdGF0aW9uSWQSCAoEUmVkMRAAEggKBFJlZDIQ",
            "ARIICgRSZWQzEAISCQoFQmx1ZTEQAxIJCgVCbHVlMhAEEgkKBUJsdWUzEAUi",
            "RwoMSW5wdXRSZXF1ZXN0EgoKAmlkGAEgASgFEgwKBGF4ZXMYAiADKAISDAoE",
            "cG92cxgDIAMoBRIPCgdidXR0b25zGAQgAygIIpQCCgxNb3Rvck91dHB1dHMS",
            "NQoLbW90b3JPdXRwdXQYASADKAsyIC5GUkNTaW0uTW90b3JPdXRwdXRzLk1v",
            "dG9yT3V0cHV0GswBCgtNb3Rvck91dHB1dBIKCgJpZBgBIAEoBRIOCgZoYW5k",
            "bGUYAiABKAMSDgoGb3V0cHV0GAMgASgBEhQKDGlucHV0Vm9sdGFnZRgEIAEo",
            "ARIVCg1vdXRwdXRDdXJyZW50GAUgASgBEhAKCHZlbG9jaXR5GAYgASgBEhAK",
            "CHBvc2l0aW9uGAcgASgBEhYKDnNlbnNvclBvc2l0aW9uGAggASgBEhUKDWlu",
            "dGVncmFsU3RhdGUYCSABKAESEQoJbGFzdEVycm9yGAogASgBIq8JCgtNb3Rv",
            "ckNvbmZpZxIKCgJpZBgBIAEoBRIOCgZoYW5kbGUYAiABKAMSEwoLZm9sbG93",
            "aW5nSWQYAyABKAUSEAoIaW52ZXJ0ZWQYBCABKAgSEwoLc2Vuc29yUGhhc2UY",
            "BSABKAgSLAoHZW5jb2RlchgGIAEoDjIbLkZSQ1NpbS5Nb3RvckNvbmZpZy5F",
            "bmNvZGVyEhkKEWN1cnJlbnRQaWRQcm9maWxlGAcgASgFEiYKBGZwaWQYCCAD",
            "KAsyGC5GUkNTaW0uTW90b3JDb25maWcuRlBJRBIfChdtb3Rpb25NYWdpY0Fj",
            "Y2VsZXJhdGlvbhgJIAEoARIhChltb3Rpb25NYWdpY0NydWlzZVZlbG9jaXR5",
            "GAogASgBEh4KFnNlbGVjdGVkU2Vuc29yUG9zaXRpb24YCyABKAESNAoLY29u",
            "dHJvbE1vZGUYDCABKA4yHy5GUkNTaW0uTW90b3JDb25maWcuQ29udHJvbE1v",
            "ZGUSFAoMdGFyZ2V0T3V0cHV0GA0gASgBEhYKDnRhcmdldFZlbG9jaXR5GA4g",
            "ASgBEhYKDnRhcmdldFBvc2l0aW9uGA8gASgBEgwKBG5hbWUYECABKAkSDQoF",
            "bW9kZWwYESABKAkSKgoGdmVuZG9yGBIgASgOMhouRlJDU2ltLk1vdG9yQ29u",
            "ZmlnLlZlbmRvchIiChplbmNvZGVyQ291bnRzUGVyUmV2b2x1dGlvbhgTIAEo",
            "BRq7AQoERlBJRBIJCgFmGAEgASgBEgkKAXAYAiABKAESCQoBaRgDIAEoARIJ",
            "CgFkGAQgASgBEg0KBWlab25lGAUgASgBEiAKGGFsbG93YWJsZUNsb3NlZExv",
            "b3BFcnJvchgGIAEoBRIeChZtYXhJbnRlZ3JhbEFjY3VtdWxhdG9yGAcgASgF",
            "EhwKFGNsb3NlZExvb3BQZWFrT3V0cHV0GAggASgFEhgKEGNsb3NlZExvb3BQ",
            "ZXJpb2QYCSABKAUi6AEKB0VuY29kZXISDwoLUXVhZEVuY29kZXIQABIUChBJ",
            "bnRlZ3JhdGVkU2Vuc29yEAESCgoGQW5hbG9nEAISDgoKVGFjaG9tZXRlchAE",
            "Eh0KGVB1bHNlV2lkdGhFbmNvZGVkUG9zaXRpb24QCBINCglTZW5zb3JTdW0Q",
            "CRIUChBTZW5zb3JEaWZmZXJlbmNlEAoSEQoNUmVtb3RlU2Vuc29yMBALEhEK",
            "DVJlbW90ZVNlbnNvcjEQDBIICgROb25lEA4SGgoWU29mdHdhcmVFbXVsYXRl",
            "ZFNlbnNvchAPEgoKBk5vdFNldBBjIhsKBlZlbmRvchIICgRDVFJFEAASBwoD",
            "UmV2EAEiwwEKC0NvbnRyb2xNb2RlEhEKDVBlcmNlbnRPdXRwdXQQABIMCghQ",
            "b3NpdGlvbhABEgwKCFZlbG9jaXR5EAISCwoHQ3VycmVudBADEgsKB1ZvbHRh",
            "Z2UQBBIMCghGb2xsb3dlchAFEhIKDk1vdGlvblBvc2l0aW9uEAYSEgoOTW90",
            "aW9uVmVsb2NpdHkQBxIRCg1Nb3Rpb25Qcm9maWxlEAgSFAoQTW90aW9uUHJv",
            "ZmlsZUFyYxAJEgwKCERpc2FibGVkEAoiawoWQ29ubmVjdFRvUm9ib3RSZXNw",
            "b25zZRImCgpyb2JvdFN0YXRlGAEgASgLMhIuRlJDU2ltLlJvYm90U3RhdGUS",
            "KQoMbW90b3JDb25maWdzGAIgAygLMhMuRlJDU2ltLk1vdG9yQ29uZmlnMsoC",
            "CgxSb2JvdFNlcnZpY2USOQoFSW5wdXQSFC5GUkNTaW0uSW5wdXRSZXF1ZXN0",
            "GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgAoARJGChJVcGRhdGVNb3Rvck91",
            "dHB1dHMSFC5GUkNTaW0uTW90b3JPdXRwdXRzGhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgAoARI8CgtVcGRhdGVNb3RvchITLkZSQ1NpbS5Nb3RvckNvbmZp",
            "ZxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjUKBVJvYm90EhIuRlJDU2lt",
            "LlJvYm90U3RhdGUaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJCCg5Db25u",
            "ZWN0VG9Sb2JvdBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoWLmdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eSIAQjgKIWZyYy5yb2JvdC5zaW11bGF0b3IubmV0d29y",
            "ay5wcm90b0IKUm9ib3RQcm90b6oCBkZSQ1NpbWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::FRCSim.RobotState), global::FRCSim.RobotState.Parser, new[]{ "State", "Initialized", "Enabled", "DriverStationAttached", "FieldManagementSystemAttached" }, null, new[]{ typeof(global::FRCSim.RobotState.Types.State), typeof(global::FRCSim.RobotState.Types.AllianceStationId) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FRCSim.InputRequest), global::FRCSim.InputRequest.Parser, new[]{ "Id", "Axes", "Povs", "Buttons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::FRCSim.MotorOutputs), global::FRCSim.MotorOutputs.Parser, new[]{ "MotorOutput" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::FRCSim.MotorOutputs.Types.MotorOutput), global::FRCSim.MotorOutputs.Types.MotorOutput.Parser, new[]{ "Id", "Handle", "Output", "InputVoltage", "OutputCurrent", "Velocity", "Position", "SensorPosition", "IntegralState", "LastError" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::FRCSim.MotorConfig), global::FRCSim.MotorConfig.Parser, new[]{ "Id", "Handle", "FollowingId", "Inverted", "SensorPhase", "Encoder", "CurrentPidProfile", "Fpid", "MotionMagicAcceleration", "MotionMagicCruiseVelocity", "SelectedSensorPosition", "ControlMode", "TargetOutput", "TargetVelocity", "TargetPosition", "Name", "Model", "Vendor", "EncoderCountsPerRevolution" }, null, new[]{ typeof(global::FRCSim.MotorConfig.Types.Encoder), typeof(global::FRCSim.MotorConfig.Types.Vendor), typeof(global::FRCSim.MotorConfig.Types.ControlMode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::FRCSim.MotorConfig.Types.FPID), global::FRCSim.MotorConfig.Types.FPID.Parser, new[]{ "F", "P", "I", "D", "IZone", "AllowableClosedLoopError", "MaxIntegralAccumulator", "ClosedLoopPeakOutput", "ClosedLoopPeriod" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::FRCSim.ConnectToRobotResponse), global::FRCSim.ConnectToRobotResponse.Parser, new[]{ "RobotState", "MotorConfigs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The state of the robot
  /// </summary>
  public sealed partial class RobotState : pb::IMessage<RobotState> {
    private static readonly pb::MessageParser<RobotState> _parser = new pb::MessageParser<RobotState>(() => new RobotState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FRCSim.RobotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState(RobotState other) : this() {
      state_ = other.state_;
      initialized_ = other.initialized_;
      enabled_ = other.enabled_;
      driverStationAttached_ = other.driverStationAttached_;
      fieldManagementSystemAttached_ = other.fieldManagementSystemAttached_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState Clone() {
      return new RobotState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::FRCSim.RobotState.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FRCSim.RobotState.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "initialized" field.</summary>
    public const int InitializedFieldNumber = 2;
    private bool initialized_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initialized {
      get { return initialized_; }
      set {
        initialized_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 3;
    private bool enabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "driverStationAttached" field.</summary>
    public const int DriverStationAttachedFieldNumber = 4;
    private bool driverStationAttached_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverStationAttached {
      get { return driverStationAttached_; }
      set {
        driverStationAttached_ = value;
      }
    }

    /// <summary>Field number for the "fieldManagementSystemAttached" field.</summary>
    public const int FieldManagementSystemAttachedFieldNumber = 5;
    private bool fieldManagementSystemAttached_;
    /// <summary>
    /// field management system
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FieldManagementSystemAttached {
      get { return fieldManagementSystemAttached_; }
      set {
        fieldManagementSystemAttached_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Initialized != other.Initialized) return false;
      if (Enabled != other.Enabled) return false;
      if (DriverStationAttached != other.DriverStationAttached) return false;
      if (FieldManagementSystemAttached != other.FieldManagementSystemAttached) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (Initialized != false) hash ^= Initialized.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (DriverStationAttached != false) hash ^= DriverStationAttached.GetHashCode();
      if (FieldManagementSystemAttached != false) hash ^= FieldManagementSystemAttached.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Initialized != false) {
        output.WriteRawTag(16);
        output.WriteBool(Initialized);
      }
      if (Enabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Enabled);
      }
      if (DriverStationAttached != false) {
        output.WriteRawTag(32);
        output.WriteBool(DriverStationAttached);
      }
      if (FieldManagementSystemAttached != false) {
        output.WriteRawTag(40);
        output.WriteBool(FieldManagementSystemAttached);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Initialized != false) {
        size += 1 + 1;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (DriverStationAttached != false) {
        size += 1 + 1;
      }
      if (FieldManagementSystemAttached != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Initialized != false) {
        Initialized = other.Initialized;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.DriverStationAttached != false) {
        DriverStationAttached = other.DriverStationAttached;
      }
      if (other.FieldManagementSystemAttached != false) {
        FieldManagementSystemAttached = other.FieldManagementSystemAttached;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::FRCSim.RobotState.Types.State) input.ReadEnum();
            break;
          }
          case 16: {
            Initialized = input.ReadBool();
            break;
          }
          case 24: {
            Enabled = input.ReadBool();
            break;
          }
          case 32: {
            DriverStationAttached = input.ReadBool();
            break;
          }
          case 40: {
            FieldManagementSystemAttached = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RobotState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("Disabled")] Disabled = 0,
        [pbr::OriginalName("Autonomous")] Autonomous = 1,
        [pbr::OriginalName("Test")] Test = 2,
        [pbr::OriginalName("Teleop")] Teleop = 3,
      }

      public enum AllianceStationId {
        [pbr::OriginalName("Red1")] Red1 = 0,
        [pbr::OriginalName("Red2")] Red2 = 1,
        [pbr::OriginalName("Red3")] Red3 = 2,
        [pbr::OriginalName("Blue1")] Blue1 = 3,
        [pbr::OriginalName("Blue2")] Blue2 = 4,
        [pbr::OriginalName("Blue3")] Blue3 = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// The request containing user input
  /// </summary>
  public sealed partial class InputRequest : pb::IMessage<InputRequest> {
    private static readonly pb::MessageParser<InputRequest> _parser = new pb::MessageParser<InputRequest>(() => new InputRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FRCSim.RobotReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRequest(InputRequest other) : this() {
      id_ = other.id_;
      axes_ = other.axes_.Clone();
      povs_ = other.povs_.Clone();
      buttons_ = other.buttons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputRequest Clone() {
      return new InputRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "axes" field.</summary>
    public const int AxesFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_axes_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> axes_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Axes {
      get { return axes_; }
    }

    /// <summary>Field number for the "povs" field.</summary>
    public const int PovsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_povs_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> povs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Povs {
      get { return povs_; }
    }

    /// <summary>Field number for the "buttons" field.</summary>
    public const int ButtonsFieldNumber = 4;
    private static readonly pb::FieldCodec<bool> _repeated_buttons_codec
        = pb::FieldCodec.ForBool(34);
    private readonly pbc::RepeatedField<bool> buttons_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Buttons {
      get { return buttons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!axes_.Equals(other.axes_)) return false;
      if(!povs_.Equals(other.povs_)) return false;
      if(!buttons_.Equals(other.buttons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= axes_.GetHashCode();
      hash ^= povs_.GetHashCode();
      hash ^= buttons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      axes_.WriteTo(output, _repeated_axes_codec);
      povs_.WriteTo(output, _repeated_povs_codec);
      buttons_.WriteTo(output, _repeated_buttons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += axes_.CalculateSize(_repeated_axes_codec);
      size += povs_.CalculateSize(_repeated_povs_codec);
      size += buttons_.CalculateSize(_repeated_buttons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      axes_.Add(other.axes_);
      povs_.Add(other.povs_);
      buttons_.Add(other.buttons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18:
          case 21: {
            axes_.AddEntriesFrom(input, _repeated_axes_codec);
            break;
          }
          case 26:
          case 24: {
            povs_.AddEntriesFrom(input, _repeated_povs_codec);
            break;
          }
          case 34:
          case 32: {
            buttons_.AddEntriesFrom(input, _repeated_buttons_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MotorOutputs : pb::IMessage<MotorOutputs> {
    private static readonly pb::MessageParser<MotorOutputs> _parser = new pb::MessageParser<MotorOutputs>(() => new MotorOutputs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MotorOutputs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FRCSim.RobotReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotorOutputs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotorOutputs(MotorOutputs other) : this() {
      motorOutput_ = other.motorOutput_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotorOutputs Clone() {
      return new MotorOutputs(this);
    }

    /// <summary>Field number for the "motorOutput" field.</summary>
    public const int MotorOutputFieldNumber = 1;
    private static readonly pb::FieldCodec<global::FRCSim.MotorOutputs.Types.MotorOutput> _repeated_motorOutput_codec
        = pb::FieldCodec.ForMessage(10, global::FRCSim.MotorOutputs.Types.MotorOutput.Parser);
    private readonly pbc::RepeatedField<global::FRCSim.MotorOutputs.Types.MotorOutput> motorOutput_ = new pbc::RepeatedField<global::FRCSim.MotorOutputs.Types.MotorOutput>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FRCSim.MotorOutputs.Types.MotorOutput> MotorOutput {
      get { return motorOutput_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MotorOutputs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MotorOutputs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!motorOutput_.Equals(other.motorOutput_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= motorOutput_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      motorOutput_.WriteTo(output, _repeated_motorOutput_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += motorOutput_.CalculateSize(_repeated_motorOutput_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MotorOutputs other) {
      if (other == null) {
        return;
      }
      motorOutput_.Add(other.motorOutput_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            motorOutput_.AddEntriesFrom(input, _repeated_motorOutput_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MotorOutputs message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Output values from a simulated motor
      /// </summary>
      public sealed partial class MotorOutput : pb::IMessage<MotorOutput> {
        private static readonly pb::MessageParser<MotorOutput> _parser = new pb::MessageParser<MotorOutput>(() => new MotorOutput());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MotorOutput> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FRCSim.MotorOutputs.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorOutput() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorOutput(MotorOutput other) : this() {
          id_ = other.id_;
          handle_ = other.handle_;
          output_ = other.output_;
          inputVoltage_ = other.inputVoltage_;
          outputCurrent_ = other.outputCurrent_;
          velocity_ = other.velocity_;
          position_ = other.position_;
          sensorPosition_ = other.sensorPosition_;
          integralState_ = other.integralState_;
          lastError_ = other.lastError_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorOutput Clone() {
          return new MotorOutput(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "handle" field.</summary>
        public const int HandleFieldNumber = 2;
        private long handle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Handle {
          get { return handle_; }
          set {
            handle_ = value;
          }
        }

        /// <summary>Field number for the "output" field.</summary>
        public const int OutputFieldNumber = 3;
        private double output_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Output {
          get { return output_; }
          set {
            output_ = value;
          }
        }

        /// <summary>Field number for the "inputVoltage" field.</summary>
        public const int InputVoltageFieldNumber = 4;
        private double inputVoltage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double InputVoltage {
          get { return inputVoltage_; }
          set {
            inputVoltage_ = value;
          }
        }

        /// <summary>Field number for the "outputCurrent" field.</summary>
        public const int OutputCurrentFieldNumber = 5;
        private double outputCurrent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double OutputCurrent {
          get { return outputCurrent_; }
          set {
            outputCurrent_ = value;
          }
        }

        /// <summary>Field number for the "velocity" field.</summary>
        public const int VelocityFieldNumber = 6;
        private double velocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Velocity {
          get { return velocity_; }
          set {
            velocity_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 7;
        private double position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "sensorPosition" field.</summary>
        public const int SensorPositionFieldNumber = 8;
        private double sensorPosition_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double SensorPosition {
          get { return sensorPosition_; }
          set {
            sensorPosition_ = value;
          }
        }

        /// <summary>Field number for the "integralState" field.</summary>
        public const int IntegralStateFieldNumber = 9;
        private double integralState_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double IntegralState {
          get { return integralState_; }
          set {
            integralState_ = value;
          }
        }

        /// <summary>Field number for the "lastError" field.</summary>
        public const int LastErrorFieldNumber = 10;
        private double lastError_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double LastError {
          get { return lastError_; }
          set {
            lastError_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MotorOutput);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MotorOutput other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Handle != other.Handle) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Output, other.Output)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(InputVoltage, other.InputVoltage)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OutputCurrent, other.OutputCurrent)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Velocity, other.Velocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Position, other.Position)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SensorPosition, other.SensorPosition)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IntegralState, other.IntegralState)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LastError, other.LastError)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Handle != 0L) hash ^= Handle.GetHashCode();
          if (Output != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Output);
          if (InputVoltage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(InputVoltage);
          if (OutputCurrent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OutputCurrent);
          if (Velocity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Velocity);
          if (Position != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Position);
          if (SensorPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SensorPosition);
          if (IntegralState != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IntegralState);
          if (LastError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LastError);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (Handle != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Handle);
          }
          if (Output != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Output);
          }
          if (InputVoltage != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(InputVoltage);
          }
          if (OutputCurrent != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(OutputCurrent);
          }
          if (Velocity != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(Velocity);
          }
          if (Position != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(Position);
          }
          if (SensorPosition != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(SensorPosition);
          }
          if (IntegralState != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(IntegralState);
          }
          if (LastError != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(LastError);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (Handle != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Handle);
          }
          if (Output != 0D) {
            size += 1 + 8;
          }
          if (InputVoltage != 0D) {
            size += 1 + 8;
          }
          if (OutputCurrent != 0D) {
            size += 1 + 8;
          }
          if (Velocity != 0D) {
            size += 1 + 8;
          }
          if (Position != 0D) {
            size += 1 + 8;
          }
          if (SensorPosition != 0D) {
            size += 1 + 8;
          }
          if (IntegralState != 0D) {
            size += 1 + 8;
          }
          if (LastError != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MotorOutput other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Handle != 0L) {
            Handle = other.Handle;
          }
          if (other.Output != 0D) {
            Output = other.Output;
          }
          if (other.InputVoltage != 0D) {
            InputVoltage = other.InputVoltage;
          }
          if (other.OutputCurrent != 0D) {
            OutputCurrent = other.OutputCurrent;
          }
          if (other.Velocity != 0D) {
            Velocity = other.Velocity;
          }
          if (other.Position != 0D) {
            Position = other.Position;
          }
          if (other.SensorPosition != 0D) {
            SensorPosition = other.SensorPosition;
          }
          if (other.IntegralState != 0D) {
            IntegralState = other.IntegralState;
          }
          if (other.LastError != 0D) {
            LastError = other.LastError;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 16: {
                Handle = input.ReadInt64();
                break;
              }
              case 25: {
                Output = input.ReadDouble();
                break;
              }
              case 33: {
                InputVoltage = input.ReadDouble();
                break;
              }
              case 41: {
                OutputCurrent = input.ReadDouble();
                break;
              }
              case 49: {
                Velocity = input.ReadDouble();
                break;
              }
              case 57: {
                Position = input.ReadDouble();
                break;
              }
              case 65: {
                SensorPosition = input.ReadDouble();
                break;
              }
              case 73: {
                IntegralState = input.ReadDouble();
                break;
              }
              case 81: {
                LastError = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class MotorConfig : pb::IMessage<MotorConfig> {
    private static readonly pb::MessageParser<MotorConfig> _parser = new pb::MessageParser<MotorConfig>(() => new MotorConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MotorConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FRCSim.RobotReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotorConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotorConfig(MotorConfig other) : this() {
      id_ = other.id_;
      handle_ = other.handle_;
      followingId_ = other.followingId_;
      inverted_ = other.inverted_;
      sensorPhase_ = other.sensorPhase_;
      encoder_ = other.encoder_;
      currentPidProfile_ = other.currentPidProfile_;
      fpid_ = other.fpid_.Clone();
      motionMagicAcceleration_ = other.motionMagicAcceleration_;
      motionMagicCruiseVelocity_ = other.motionMagicCruiseVelocity_;
      selectedSensorPosition_ = other.selectedSensorPosition_;
      controlMode_ = other.controlMode_;
      targetOutput_ = other.targetOutput_;
      targetVelocity_ = other.targetVelocity_;
      targetPosition_ = other.targetPosition_;
      name_ = other.name_;
      model_ = other.model_;
      vendor_ = other.vendor_;
      encoderCountsPerRevolution_ = other.encoderCountsPerRevolution_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MotorConfig Clone() {
      return new MotorConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 2;
    private long handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "followingId" field.</summary>
    public const int FollowingIdFieldNumber = 3;
    private int followingId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FollowingId {
      get { return followingId_; }
      set {
        followingId_ = value;
      }
    }

    /// <summary>Field number for the "inverted" field.</summary>
    public const int InvertedFieldNumber = 4;
    private bool inverted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inverted {
      get { return inverted_; }
      set {
        inverted_ = value;
      }
    }

    /// <summary>Field number for the "sensorPhase" field.</summary>
    public const int SensorPhaseFieldNumber = 5;
    private bool sensorPhase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SensorPhase {
      get { return sensorPhase_; }
      set {
        sensorPhase_ = value;
      }
    }

    /// <summary>Field number for the "encoder" field.</summary>
    public const int EncoderFieldNumber = 6;
    private global::FRCSim.MotorConfig.Types.Encoder encoder_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FRCSim.MotorConfig.Types.Encoder Encoder {
      get { return encoder_; }
      set {
        encoder_ = value;
      }
    }

    /// <summary>Field number for the "currentPidProfile" field.</summary>
    public const int CurrentPidProfileFieldNumber = 7;
    private int currentPidProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPidProfile {
      get { return currentPidProfile_; }
      set {
        currentPidProfile_ = value;
      }
    }

    /// <summary>Field number for the "fpid" field.</summary>
    public const int FpidFieldNumber = 8;
    private static readonly pb::FieldCodec<global::FRCSim.MotorConfig.Types.FPID> _repeated_fpid_codec
        = pb::FieldCodec.ForMessage(66, global::FRCSim.MotorConfig.Types.FPID.Parser);
    private readonly pbc::RepeatedField<global::FRCSim.MotorConfig.Types.FPID> fpid_ = new pbc::RepeatedField<global::FRCSim.MotorConfig.Types.FPID>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FRCSim.MotorConfig.Types.FPID> Fpid {
      get { return fpid_; }
    }

    /// <summary>Field number for the "motionMagicAcceleration" field.</summary>
    public const int MotionMagicAccelerationFieldNumber = 9;
    private double motionMagicAcceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MotionMagicAcceleration {
      get { return motionMagicAcceleration_; }
      set {
        motionMagicAcceleration_ = value;
      }
    }

    /// <summary>Field number for the "motionMagicCruiseVelocity" field.</summary>
    public const int MotionMagicCruiseVelocityFieldNumber = 10;
    private double motionMagicCruiseVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MotionMagicCruiseVelocity {
      get { return motionMagicCruiseVelocity_; }
      set {
        motionMagicCruiseVelocity_ = value;
      }
    }

    /// <summary>Field number for the "selectedSensorPosition" field.</summary>
    public const int SelectedSensorPositionFieldNumber = 11;
    private double selectedSensorPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SelectedSensorPosition {
      get { return selectedSensorPosition_; }
      set {
        selectedSensorPosition_ = value;
      }
    }

    /// <summary>Field number for the "controlMode" field.</summary>
    public const int ControlModeFieldNumber = 12;
    private global::FRCSim.MotorConfig.Types.ControlMode controlMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FRCSim.MotorConfig.Types.ControlMode ControlMode {
      get { return controlMode_; }
      set {
        controlMode_ = value;
      }
    }

    /// <summary>Field number for the "targetOutput" field.</summary>
    public const int TargetOutputFieldNumber = 13;
    private double targetOutput_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetOutput {
      get { return targetOutput_; }
      set {
        targetOutput_ = value;
      }
    }

    /// <summary>Field number for the "targetVelocity" field.</summary>
    public const int TargetVelocityFieldNumber = 14;
    private double targetVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetVelocity {
      get { return targetVelocity_; }
      set {
        targetVelocity_ = value;
      }
    }

    /// <summary>Field number for the "targetPosition" field.</summary>
    public const int TargetPositionFieldNumber = 15;
    private double targetPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TargetPosition {
      get { return targetPosition_; }
      set {
        targetPosition_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 16;
    private string name_ = "";
    /// <summary>
    /// description of the motor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 17;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vendor" field.</summary>
    public const int VendorFieldNumber = 18;
    private global::FRCSim.MotorConfig.Types.Vendor vendor_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FRCSim.MotorConfig.Types.Vendor Vendor {
      get { return vendor_; }
      set {
        vendor_ = value;
      }
    }

    /// <summary>Field number for the "encoderCountsPerRevolution" field.</summary>
    public const int EncoderCountsPerRevolutionFieldNumber = 19;
    private int encoderCountsPerRevolution_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncoderCountsPerRevolution {
      get { return encoderCountsPerRevolution_; }
      set {
        encoderCountsPerRevolution_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MotorConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MotorConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Handle != other.Handle) return false;
      if (FollowingId != other.FollowingId) return false;
      if (Inverted != other.Inverted) return false;
      if (SensorPhase != other.SensorPhase) return false;
      if (Encoder != other.Encoder) return false;
      if (CurrentPidProfile != other.CurrentPidProfile) return false;
      if(!fpid_.Equals(other.fpid_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MotionMagicAcceleration, other.MotionMagicAcceleration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MotionMagicCruiseVelocity, other.MotionMagicCruiseVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SelectedSensorPosition, other.SelectedSensorPosition)) return false;
      if (ControlMode != other.ControlMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetOutput, other.TargetOutput)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetVelocity, other.TargetVelocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetPosition, other.TargetPosition)) return false;
      if (Name != other.Name) return false;
      if (Model != other.Model) return false;
      if (Vendor != other.Vendor) return false;
      if (EncoderCountsPerRevolution != other.EncoderCountsPerRevolution) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Handle != 0L) hash ^= Handle.GetHashCode();
      if (FollowingId != 0) hash ^= FollowingId.GetHashCode();
      if (Inverted != false) hash ^= Inverted.GetHashCode();
      if (SensorPhase != false) hash ^= SensorPhase.GetHashCode();
      if (Encoder != 0) hash ^= Encoder.GetHashCode();
      if (CurrentPidProfile != 0) hash ^= CurrentPidProfile.GetHashCode();
      hash ^= fpid_.GetHashCode();
      if (MotionMagicAcceleration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MotionMagicAcceleration);
      if (MotionMagicCruiseVelocity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MotionMagicCruiseVelocity);
      if (SelectedSensorPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SelectedSensorPosition);
      if (ControlMode != 0) hash ^= ControlMode.GetHashCode();
      if (TargetOutput != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetOutput);
      if (TargetVelocity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetVelocity);
      if (TargetPosition != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetPosition);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (Vendor != 0) hash ^= Vendor.GetHashCode();
      if (EncoderCountsPerRevolution != 0) hash ^= EncoderCountsPerRevolution.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Handle != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Handle);
      }
      if (FollowingId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FollowingId);
      }
      if (Inverted != false) {
        output.WriteRawTag(32);
        output.WriteBool(Inverted);
      }
      if (SensorPhase != false) {
        output.WriteRawTag(40);
        output.WriteBool(SensorPhase);
      }
      if (Encoder != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Encoder);
      }
      if (CurrentPidProfile != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CurrentPidProfile);
      }
      fpid_.WriteTo(output, _repeated_fpid_codec);
      if (MotionMagicAcceleration != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(MotionMagicAcceleration);
      }
      if (MotionMagicCruiseVelocity != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(MotionMagicCruiseVelocity);
      }
      if (SelectedSensorPosition != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(SelectedSensorPosition);
      }
      if (ControlMode != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) ControlMode);
      }
      if (TargetOutput != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(TargetOutput);
      }
      if (TargetVelocity != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(TargetVelocity);
      }
      if (TargetPosition != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(TargetPosition);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Name);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Model);
      }
      if (Vendor != 0) {
        output.WriteRawTag(144, 1);
        output.WriteEnum((int) Vendor);
      }
      if (EncoderCountsPerRevolution != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(EncoderCountsPerRevolution);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Handle != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Handle);
      }
      if (FollowingId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FollowingId);
      }
      if (Inverted != false) {
        size += 1 + 1;
      }
      if (SensorPhase != false) {
        size += 1 + 1;
      }
      if (Encoder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Encoder);
      }
      if (CurrentPidProfile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPidProfile);
      }
      size += fpid_.CalculateSize(_repeated_fpid_codec);
      if (MotionMagicAcceleration != 0D) {
        size += 1 + 8;
      }
      if (MotionMagicCruiseVelocity != 0D) {
        size += 1 + 8;
      }
      if (SelectedSensorPosition != 0D) {
        size += 1 + 8;
      }
      if (ControlMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ControlMode);
      }
      if (TargetOutput != 0D) {
        size += 1 + 8;
      }
      if (TargetVelocity != 0D) {
        size += 1 + 8;
      }
      if (TargetPosition != 0D) {
        size += 1 + 8;
      }
      if (Name.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Model.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (Vendor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Vendor);
      }
      if (EncoderCountsPerRevolution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EncoderCountsPerRevolution);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MotorConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Handle != 0L) {
        Handle = other.Handle;
      }
      if (other.FollowingId != 0) {
        FollowingId = other.FollowingId;
      }
      if (other.Inverted != false) {
        Inverted = other.Inverted;
      }
      if (other.SensorPhase != false) {
        SensorPhase = other.SensorPhase;
      }
      if (other.Encoder != 0) {
        Encoder = other.Encoder;
      }
      if (other.CurrentPidProfile != 0) {
        CurrentPidProfile = other.CurrentPidProfile;
      }
      fpid_.Add(other.fpid_);
      if (other.MotionMagicAcceleration != 0D) {
        MotionMagicAcceleration = other.MotionMagicAcceleration;
      }
      if (other.MotionMagicCruiseVelocity != 0D) {
        MotionMagicCruiseVelocity = other.MotionMagicCruiseVelocity;
      }
      if (other.SelectedSensorPosition != 0D) {
        SelectedSensorPosition = other.SelectedSensorPosition;
      }
      if (other.ControlMode != 0) {
        ControlMode = other.ControlMode;
      }
      if (other.TargetOutput != 0D) {
        TargetOutput = other.TargetOutput;
      }
      if (other.TargetVelocity != 0D) {
        TargetVelocity = other.TargetVelocity;
      }
      if (other.TargetPosition != 0D) {
        TargetPosition = other.TargetPosition;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.Vendor != 0) {
        Vendor = other.Vendor;
      }
      if (other.EncoderCountsPerRevolution != 0) {
        EncoderCountsPerRevolution = other.EncoderCountsPerRevolution;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Handle = input.ReadInt64();
            break;
          }
          case 24: {
            FollowingId = input.ReadInt32();
            break;
          }
          case 32: {
            Inverted = input.ReadBool();
            break;
          }
          case 40: {
            SensorPhase = input.ReadBool();
            break;
          }
          case 48: {
            Encoder = (global::FRCSim.MotorConfig.Types.Encoder) input.ReadEnum();
            break;
          }
          case 56: {
            CurrentPidProfile = input.ReadInt32();
            break;
          }
          case 66: {
            fpid_.AddEntriesFrom(input, _repeated_fpid_codec);
            break;
          }
          case 73: {
            MotionMagicAcceleration = input.ReadDouble();
            break;
          }
          case 81: {
            MotionMagicCruiseVelocity = input.ReadDouble();
            break;
          }
          case 89: {
            SelectedSensorPosition = input.ReadDouble();
            break;
          }
          case 96: {
            ControlMode = (global::FRCSim.MotorConfig.Types.ControlMode) input.ReadEnum();
            break;
          }
          case 105: {
            TargetOutput = input.ReadDouble();
            break;
          }
          case 113: {
            TargetVelocity = input.ReadDouble();
            break;
          }
          case 121: {
            TargetPosition = input.ReadDouble();
            break;
          }
          case 130: {
            Name = input.ReadString();
            break;
          }
          case 138: {
            Model = input.ReadString();
            break;
          }
          case 144: {
            Vendor = (global::FRCSim.MotorConfig.Types.Vendor) input.ReadEnum();
            break;
          }
          case 152: {
            EncoderCountsPerRevolution = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MotorConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Encoder {
        /// <summary>
        ///*
        /// Quadrature encoder
        /// </summary>
        [pbr::OriginalName("QuadEncoder")] QuadEncoder = 0,
        /// <summary>
        ///*
        /// TalonFX supports an integrated sensor.
        /// </summary>
        [pbr::OriginalName("IntegratedSensor")] IntegratedSensor = 1,
        /// <summary>
        ///*
        /// Analog potentiometer/encoder
        /// </summary>
        [pbr::OriginalName("Analog")] Analog = 2,
        /// <summary>
        ///*
        /// Tachometer
        /// </summary>
        [pbr::OriginalName("Tachometer")] Tachometer = 4,
        /// <summary>
        ///*
        /// CTRE Mag Encoder in Relative mode or
        /// any other device that uses PWM to encode its output
        /// </summary>
        [pbr::OriginalName("PulseWidthEncodedPosition")] PulseWidthEncodedPosition = 8,
        /// <summary>
        ///*
        /// Sum0 + Sum1
        /// </summary>
        [pbr::OriginalName("SensorSum")] SensorSum = 9,
        /// <summary>
        ///*
        /// Diff0 - Diff1
        /// </summary>
        [pbr::OriginalName("SensorDifference")] SensorDifference = 10,
        /// <summary>
        ///*
        /// Sensor configured in RemoteFilter0
        /// </summary>
        [pbr::OriginalName("RemoteSensor0")] RemoteSensor0 = 11,
        /// <summary>
        ///*
        /// Sensor configured in RemoteFilter1
        /// </summary>
        [pbr::OriginalName("RemoteSensor1")] RemoteSensor1 = 12,
        /// <summary>
        ///*
        /// Position and velocity will read 0.
        /// </summary>
        [pbr::OriginalName("None")] None = 14,
        /// <summary>
        ///*
        /// Motor Controller will fake a sensor based on applied motor output.
        /// </summary>
        [pbr::OriginalName("SoftwareEmulatedSensor")] SoftwareEmulatedSensor = 15,
        /// <summary>
        ///*
        /// Special enum for FRCSim to define an encoder as not configured yet
        /// </summary>
        [pbr::OriginalName("NotSet")] NotSet = 99,
      }

      public enum Vendor {
        [pbr::OriginalName("CTRE")] Ctre = 0,
        [pbr::OriginalName("Rev")] Rev = 1,
      }

      public enum ControlMode {
        [pbr::OriginalName("PercentOutput")] PercentOutput = 0,
        [pbr::OriginalName("Position")] Position = 1,
        [pbr::OriginalName("Velocity")] Velocity = 2,
        [pbr::OriginalName("Current")] Current = 3,
        [pbr::OriginalName("Voltage")] Voltage = 4,
        [pbr::OriginalName("Follower")] Follower = 5,
        [pbr::OriginalName("MotionPosition")] MotionPosition = 6,
        [pbr::OriginalName("MotionVelocity")] MotionVelocity = 7,
        [pbr::OriginalName("MotionProfile")] MotionProfile = 8,
        [pbr::OriginalName("MotionProfileArc")] MotionProfileArc = 9,
        [pbr::OriginalName("Disabled")] Disabled = 10,
      }

      public sealed partial class FPID : pb::IMessage<FPID> {
        private static readonly pb::MessageParser<FPID> _parser = new pb::MessageParser<FPID>(() => new FPID());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FPID> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::FRCSim.MotorConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FPID() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FPID(FPID other) : this() {
          f_ = other.f_;
          p_ = other.p_;
          i_ = other.i_;
          d_ = other.d_;
          iZone_ = other.iZone_;
          allowableClosedLoopError_ = other.allowableClosedLoopError_;
          maxIntegralAccumulator_ = other.maxIntegralAccumulator_;
          closedLoopPeakOutput_ = other.closedLoopPeakOutput_;
          closedLoopPeriod_ = other.closedLoopPeriod_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FPID Clone() {
          return new FPID(this);
        }

        /// <summary>Field number for the "f" field.</summary>
        public const int FFieldNumber = 1;
        private double f_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double F {
          get { return f_; }
          set {
            f_ = value;
          }
        }

        /// <summary>Field number for the "p" field.</summary>
        public const int PFieldNumber = 2;
        private double p_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double P {
          get { return p_; }
          set {
            p_ = value;
          }
        }

        /// <summary>Field number for the "i" field.</summary>
        public const int IFieldNumber = 3;
        private double i_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double I {
          get { return i_; }
          set {
            i_ = value;
          }
        }

        /// <summary>Field number for the "d" field.</summary>
        public const int DFieldNumber = 4;
        private double d_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double D {
          get { return d_; }
          set {
            d_ = value;
          }
        }

        /// <summary>Field number for the "iZone" field.</summary>
        public const int IZoneFieldNumber = 5;
        private double iZone_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double IZone {
          get { return iZone_; }
          set {
            iZone_ = value;
          }
        }

        /// <summary>Field number for the "allowableClosedLoopError" field.</summary>
        public const int AllowableClosedLoopErrorFieldNumber = 6;
        private int allowableClosedLoopError_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AllowableClosedLoopError {
          get { return allowableClosedLoopError_; }
          set {
            allowableClosedLoopError_ = value;
          }
        }

        /// <summary>Field number for the "maxIntegralAccumulator" field.</summary>
        public const int MaxIntegralAccumulatorFieldNumber = 7;
        private int maxIntegralAccumulator_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxIntegralAccumulator {
          get { return maxIntegralAccumulator_; }
          set {
            maxIntegralAccumulator_ = value;
          }
        }

        /// <summary>Field number for the "closedLoopPeakOutput" field.</summary>
        public const int ClosedLoopPeakOutputFieldNumber = 8;
        private int closedLoopPeakOutput_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClosedLoopPeakOutput {
          get { return closedLoopPeakOutput_; }
          set {
            closedLoopPeakOutput_ = value;
          }
        }

        /// <summary>Field number for the "closedLoopPeriod" field.</summary>
        public const int ClosedLoopPeriodFieldNumber = 9;
        private int closedLoopPeriod_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ClosedLoopPeriod {
          get { return closedLoopPeriod_; }
          set {
            closedLoopPeriod_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FPID);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FPID other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(F, other.F)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(P, other.P)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(I, other.I)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(D, other.D)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(IZone, other.IZone)) return false;
          if (AllowableClosedLoopError != other.AllowableClosedLoopError) return false;
          if (MaxIntegralAccumulator != other.MaxIntegralAccumulator) return false;
          if (ClosedLoopPeakOutput != other.ClosedLoopPeakOutput) return false;
          if (ClosedLoopPeriod != other.ClosedLoopPeriod) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (F != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(F);
          if (P != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(P);
          if (I != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(I);
          if (D != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(D);
          if (IZone != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(IZone);
          if (AllowableClosedLoopError != 0) hash ^= AllowableClosedLoopError.GetHashCode();
          if (MaxIntegralAccumulator != 0) hash ^= MaxIntegralAccumulator.GetHashCode();
          if (ClosedLoopPeakOutput != 0) hash ^= ClosedLoopPeakOutput.GetHashCode();
          if (ClosedLoopPeriod != 0) hash ^= ClosedLoopPeriod.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (F != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(F);
          }
          if (P != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(P);
          }
          if (I != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(I);
          }
          if (D != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(D);
          }
          if (IZone != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(IZone);
          }
          if (AllowableClosedLoopError != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(AllowableClosedLoopError);
          }
          if (MaxIntegralAccumulator != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(MaxIntegralAccumulator);
          }
          if (ClosedLoopPeakOutput != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(ClosedLoopPeakOutput);
          }
          if (ClosedLoopPeriod != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(ClosedLoopPeriod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (F != 0D) {
            size += 1 + 8;
          }
          if (P != 0D) {
            size += 1 + 8;
          }
          if (I != 0D) {
            size += 1 + 8;
          }
          if (D != 0D) {
            size += 1 + 8;
          }
          if (IZone != 0D) {
            size += 1 + 8;
          }
          if (AllowableClosedLoopError != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowableClosedLoopError);
          }
          if (MaxIntegralAccumulator != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIntegralAccumulator);
          }
          if (ClosedLoopPeakOutput != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClosedLoopPeakOutput);
          }
          if (ClosedLoopPeriod != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClosedLoopPeriod);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FPID other) {
          if (other == null) {
            return;
          }
          if (other.F != 0D) {
            F = other.F;
          }
          if (other.P != 0D) {
            P = other.P;
          }
          if (other.I != 0D) {
            I = other.I;
          }
          if (other.D != 0D) {
            D = other.D;
          }
          if (other.IZone != 0D) {
            IZone = other.IZone;
          }
          if (other.AllowableClosedLoopError != 0) {
            AllowableClosedLoopError = other.AllowableClosedLoopError;
          }
          if (other.MaxIntegralAccumulator != 0) {
            MaxIntegralAccumulator = other.MaxIntegralAccumulator;
          }
          if (other.ClosedLoopPeakOutput != 0) {
            ClosedLoopPeakOutput = other.ClosedLoopPeakOutput;
          }
          if (other.ClosedLoopPeriod != 0) {
            ClosedLoopPeriod = other.ClosedLoopPeriod;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                F = input.ReadDouble();
                break;
              }
              case 17: {
                P = input.ReadDouble();
                break;
              }
              case 25: {
                I = input.ReadDouble();
                break;
              }
              case 33: {
                D = input.ReadDouble();
                break;
              }
              case 41: {
                IZone = input.ReadDouble();
                break;
              }
              case 48: {
                AllowableClosedLoopError = input.ReadInt32();
                break;
              }
              case 56: {
                MaxIntegralAccumulator = input.ReadInt32();
                break;
              }
              case 64: {
                ClosedLoopPeakOutput = input.ReadInt32();
                break;
              }
              case 72: {
                ClosedLoopPeriod = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ConnectToRobotResponse : pb::IMessage<ConnectToRobotResponse> {
    private static readonly pb::MessageParser<ConnectToRobotResponse> _parser = new pb::MessageParser<ConnectToRobotResponse>(() => new ConnectToRobotResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToRobotResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::FRCSim.RobotReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRobotResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRobotResponse(ConnectToRobotResponse other) : this() {
      robotState_ = other.robotState_ != null ? other.robotState_.Clone() : null;
      motorConfigs_ = other.motorConfigs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRobotResponse Clone() {
      return new ConnectToRobotResponse(this);
    }

    /// <summary>Field number for the "robotState" field.</summary>
    public const int RobotStateFieldNumber = 1;
    private global::FRCSim.RobotState robotState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::FRCSim.RobotState RobotState {
      get { return robotState_; }
      set {
        robotState_ = value;
      }
    }

    /// <summary>Field number for the "motorConfigs" field.</summary>
    public const int MotorConfigsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::FRCSim.MotorConfig> _repeated_motorConfigs_codec
        = pb::FieldCodec.ForMessage(18, global::FRCSim.MotorConfig.Parser);
    private readonly pbc::RepeatedField<global::FRCSim.MotorConfig> motorConfigs_ = new pbc::RepeatedField<global::FRCSim.MotorConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::FRCSim.MotorConfig> MotorConfigs {
      get { return motorConfigs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToRobotResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToRobotResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RobotState, other.RobotState)) return false;
      if(!motorConfigs_.Equals(other.motorConfigs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (robotState_ != null) hash ^= RobotState.GetHashCode();
      hash ^= motorConfigs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (robotState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RobotState);
      }
      motorConfigs_.WriteTo(output, _repeated_motorConfigs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (robotState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotState);
      }
      size += motorConfigs_.CalculateSize(_repeated_motorConfigs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToRobotResponse other) {
      if (other == null) {
        return;
      }
      if (other.robotState_ != null) {
        if (robotState_ == null) {
          RobotState = new global::FRCSim.RobotState();
        }
        RobotState.MergeFrom(other.RobotState);
      }
      motorConfigs_.Add(other.motorConfigs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (robotState_ == null) {
              RobotState = new global::FRCSim.RobotState();
            }
            input.ReadMessage(RobotState);
            break;
          }
          case 18: {
            motorConfigs_.AddEntriesFrom(input, _repeated_motorConfigs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
